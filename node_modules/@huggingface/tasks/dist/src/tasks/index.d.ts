import type { PipelineType } from "../../../src/pipelines";
export type * from "../../../src/tasks/audio-classification/inference";
export type * from "../../../src/tasks/automatic-speech-recognition/inference";
export type { ChatCompletionInput, ChatCompletionInputMessage, ChatCompletionOutput, ChatCompletionOutputComplete, ChatCompletionOutputMessage, ChatCompletionStreamOutput, ChatCompletionStreamOutputChoice, ChatCompletionStreamOutputDelta, } from "../../../src/tasks/chat-completion/inference";
export type * from "../../../src/tasks/document-question-answering/inference";
export type * from "../../../src/tasks/feature-extraction/inference";
export type * from "../../../src/tasks/fill-mask/inference";
export type { ImageClassificationInput, ImageClassificationOutput, ImageClassificationOutputElement, ImageClassificationParameters, } from "../../../src/tasks/image-classification/inference";
export type * from "../../../src/tasks/image-to-image/inference";
export type { ImageToTextInput, ImageToTextOutput, ImageToTextParameters } from "../../../src/tasks/image-to-text/inference";
export type * from "../../../src/tasks/image-segmentation/inference";
export type * from "../../../src/tasks/object-detection/inference";
export type * from "../../../src/tasks/depth-estimation/inference";
export type * from "../../../src/tasks/question-answering/inference";
export type * from "../../../src/tasks/sentence-similarity/inference";
export type * from "../../../src/tasks/summarization/inference";
export type * from "../../../src/tasks/table-question-answering/inference";
export type { TextToImageInput, TextToImageOutput, TextToImageParameters } from "../../../src/tasks/text-to-image/inference";
export type { TextToSpeechParameters, TextToSpeechInput, TextToSpeechOutput } from "../../../src/tasks/text-to-speech/inference";
export type * from "../../../src/tasks/token-classification/inference";
export type { TranslationInput, TranslationOutput } from "../../../src/tasks/translation/inference";
export type { ClassificationOutputTransform, TextClassificationInput, TextClassificationOutput, TextClassificationOutputElement, TextClassificationParameters, } from "../../../src/tasks/text-classification/inference";
export type { TextGenerationOutputFinishReason, TextGenerationOutputPrefillToken, TextGenerationInput, TextGenerationOutput, TextGenerationOutputDetails, TextGenerationInputGenerateParameters, TextGenerationOutputBestOfSequence, TextGenerationOutputToken, TextGenerationStreamOutputStreamDetails, TextGenerationStreamOutput, } from "../../../src/tasks/text-generation/inference";
export type * from "../../../src/tasks/video-classification/inference";
export type * from "../../../src/tasks/visual-question-answering/inference";
export type * from "../../../src/tasks/zero-shot-classification/inference";
export type * from "../../../src/tasks/zero-shot-image-classification/inference";
export type { BoundingBox, ZeroShotObjectDetectionInput, ZeroShotObjectDetectionInputData, ZeroShotObjectDetectionOutput, ZeroShotObjectDetectionOutputElement, } from "../../../src/tasks/zero-shot-object-detection/inference";
import type { ModelLibraryKey } from "../../../src/model-libraries";
/**
 * Model libraries compatible with each ML task
 */
export declare const TASKS_MODEL_LIBRARIES: Record<PipelineType, ModelLibraryKey[]>;
export declare const TASKS_DATA: Record<PipelineType, TaskData | undefined>;
export interface ExampleRepo {
    description: string;
    id: string;
}
export type TaskDemoEntry = {
    filename: string;
    type: "audio";
} | {
    data: Array<{
        label: string;
        score: number;
    }>;
    type: "chart";
} | {
    filename: string;
    type: "img";
} | {
    table: string[][];
    type: "tabular";
} | {
    content: string;
    label: string;
    type: "text";
} | {
    text: string;
    tokens: Array<{
        end: number;
        start: number;
        type: string;
    }>;
    type: "text-with-tokens";
};
export interface TaskDemo {
    inputs: TaskDemoEntry[];
    outputs: TaskDemoEntry[];
}
export interface TaskData {
    datasets: ExampleRepo[];
    demo: TaskDemo;
    id: PipelineType;
    canonicalId?: PipelineType;
    isPlaceholder?: boolean;
    label: string;
    libraries: ModelLibraryKey[];
    metrics: ExampleRepo[];
    models: ExampleRepo[];
    spaces: ExampleRepo[];
    summary: string;
    widgetModels: string[];
    youtubeId?: string;
}
export type TaskDataCustom = Omit<TaskData, "id" | "label" | "libraries">;
//# sourceMappingURL=index.d.ts.map